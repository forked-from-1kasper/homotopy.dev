include ../../../header

html
    head
        meta(property='og:title'       content='LIST')
        meta(property='og:description' content='List')
        meta(property='og:url'         content='https://homotopy.dev/foundations/mltt/list/')

block title
    title LIST

block content
    nav
        <a href='https://homotopy.dev/'>HTS</a>
        <a href='https://homotopy.dev/library/'>LIB</a>
        <a href='#'>LIST</a>
    article.main.list
        section
            h1 LIST
            aside <a href="https://homotopy.dev/library/">Homotopy Library</a>
                time Published: 4 NOV 2017
            p.
                The data type of <b>list</b> over a given set A can
                be represented as the initial algebra (&mu;&nbsp;L<sub>A</sub>,&nbsp;in)
                of the functor L<sub>A</sub>(X) = 1 + (A &times; X).
                Denote &mu; L<sub>A</sub> = List(A). The constructor
                functions nil: 1 &rightarrow; List(A) and cons: A
                &times; List(A) &rightarrow; List(A) are defined
                by nil = in ◦ inl and cons = in ◦ inr, so
                in = <b>[nil,cons]</b>.
            p.
                In type theory $List$ type could be expressed as
                $$
                   List(A) := W_{(x:1+A)},\ rec_{1+A}(A,U,0,λa.𝟏,x).
                $$
            code.
                def List-ctor (A: U) := maybe-rec A U 𝟎 (λ (a : A), 𝟏)
                def List (A: U) := W (x : Maybe A), List-ctor A x

            h2 Constructors
            p.
                You can create zero list with <b>nil</b> and append an element
                to the head of the list with <b>cons</b>.
            code.
                def nil (A: U) : List A
                def cons (A: U) (x : A) (xs: List A) : List A

            h2 Induction Principle
            p.
               Induction principle allows you to prove general predicate on List (C n)
               from predicates on constructors (C nil) and (C cons).
            code.
                def List-ind (A: U) (C: List A -> U)
                    (z: C (nil A)) (s: Π (x: A) (xs: List A), C xs -> C (cons A x xs))
                  : Π (n: List A), C n

            h2 Eliminators
            code.
                def List-rec  (A: U) (C : U) (z : C) (s : A → List A → C → C) : List A → C
                def List-iter (A: U) (C : U) (z : C) (s : A → C → C) : List A → C
                def List-case (A: U) (C : U) (z : C) (s : A → C) : List A → C

include ../../../footer