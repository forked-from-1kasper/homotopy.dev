include ../../../header

html
    head
        meta(property='og:title'       content='INDUCTIVE')
        meta(property='og:description' content='Inductive MLTT Foundations')
        meta(property='og:url'         content='https://homotopy.dev/foundations/mltt/inductive/')

block title
    title INDUCTIVE

block content
    nav
        <a href='https://homotopy.dev/'>HTS</a>
        <a href='https://homotopy.dev/library/'>LIB</a>
        <a href='#'>INDUCTIVE</a>
    article.main.list
        section
            h1 INDUCTIVE BASIS
            aside
                time Published: 27 JAN 2022
            p.
                These types form the inductive basis of MLTT foundations
                and are built-in into type checker.

            h1 EMPTY
            p.
                The Empty type represents False-type logical 𝟎, type without inhabitants, Void or ⊥ (Bottom).
                As it has not inhabitants it lacks both constructors and eliminators, however, it has induction.

            h2 Formation
            p
                +tex(false, false).
                    $\mathbf{Definition}$ (Empty). Empty-type is defined as built-in 𝟎-type:
                +tex(true, false).
                    $$
                        𝟎 : \mathcal{U}.
                    $$

            h2 Elimination
            p
                +tex(false, false).
                    $\mathbf{Definition}$ (Induction Principle $\mathrm{ind_0}$). 𝟎-type is satisfying the
                    induction principle:
                +tex(true, false).
                    $$
                        \mathrm{ind_0} : \prod_{C\ :\ 𝟎\ \rightarrow\ \mathcal{U}} \prod_{z\ :\ 𝟎} C(z).
                    $$

            +code.
                def Empty-ind (C: 𝟎 → U) (z: 𝟎) : C z := ind₀ (C z) z

            p
                +tex(false, false).
                    $\mathbf{Definition}$ (Negation or isEmpty). For any type A negation of A is defined as arrow from A to 𝟎:
                +tex(true, false).
                    $$
                       \neg A := A \rightarrow 𝟎.
                    $$

            +code.
                def isEmpty (A: U): U := A → 𝟎

            +tex.
                The witness of $\neg A$ is obtained by assuming A and deriving a contradiction.
                This techniques is called proof of negation and is applicable to any types in constrast
                to proof by contradiction which implies $\neg\neg A \rightarrow A$ (double negation elimination) and is
                applicable only to decidable types with $\neg A + A$ property.
            br

            h1 UNIT

            p.
                Unit type is the simplest type equipped with full set of MLTT inference rules.
                It contains single inhabitant ★ (star).

            h2 Formation

            p
                +tex(false, false).
                    $\mathbf{Definition}$ (Unit). Unit-type is defined as built-in 𝟏-type:
                +tex(true, false).
                    $$
                        𝟏 : \mathcal{U}.
                    $$

            h2 Introduction

            p
                +tex(false, false).
                    $\mathbf{Definition}$ (Star). 𝟏-type containts single inhabitant ★:
                +tex(true, false).
                    $$
                         ★ : 𝟏.
                    $$

            h2 Elimination

            p
                +tex(false, false).
                    $\mathbf{Definition}$. (Induction Principle $\mathrm{ind_1}$). 𝟏-type satisfies
                    induction principle that for any family $C$ indexed by $x : 1$ there is a function
                +tex(true, false).
                    $$
                        \mathrm{ind_1} : \prod_{C\ :\ 𝟏\ \rightarrow\ \mathcal{U}} \prod_{x\ :\ C(★)} \prod_{z\ :\ 𝟏} C(z).
                    $$

            +code.
                def 1-ind (C: 𝟏 → U) (x: C ★) (z: 𝟏) : C z := ind₁ C x z

            h2 Computation

            p
                +tex(false, false).
                    $\mathbf{Theorem}$ (Unit Computes). The following equation holds:
                +tex(true, false).
                    $$
                       \mathrm{ind_1}(x,★) = x.
                    $$

            h1 BOOL

            +tex.
                𝟐 is a logical boolean type or 0-sphere which has two
                inhabitants false (or $0_2$) and true (or $1_2$).

            h2 Formation

            p
                +tex(false, false).
                    $\mathbf{Definition}$ (Bool). Boolean-type or 0-sphere is defined as built-in 𝟐-type:
                +tex(true, false).
                    $$
                        𝟐 : \mathcal{U}.
                    $$

            h2 Introduction

            p
                +tex(false, false).
                    $\mathbf{Definition}$ ($0_2$). false or $0_2$.
                +tex(true, false).
                    $$
                         0_2 : 𝟐.
                    $$

            p
                +tex(false, false).
                    $\mathbf{Definition}$ ($1_2$). true or $1_2$.
                +tex(true, false).
                    $$
                         1_2 : 𝟐.
                    $$

            h2 Elimination

            p
                +tex(false, false).
                    $\mathbf{Definition}$ (Induction Principle $\mathrm{ind_2}$).
                +tex(true, false).
                    $$
                        \mathrm{ind_2} : \prod_{C\ :\ 𝟐\ \rightarrow\ U} \prod_{x\ :\ C(0_2)} \prod_{y\ :\ C(0_1)} \prod_{z\ :\ 𝟐} C(z).
                    $$
            +code.
                def 2-ind (C: 𝟐 → U) (x: C 0₂) (y: C 1₂) (z: 𝟐) : C z := ind₂ C x y z
            br

            h1 W
            +tex.
                Well-founded trees without mutual recursion represented as $\mathrm{W}$-types.

            h2 Formation

            p
                +tex(false, false).
                    $\mathbf{Definition}$ ($\mathrm{W}$-Formation). For $A : \mathcal{U}$ and $B : A \rightarrow \mathcal{U}$, type $\mathrm{W}$
                    is defined as $\mathrm{W}(A,B) : \mathcal{U}$ or
                +tex(true, false).
                    $$
                       \mathrm{W}_{(x : A)} B(x) : \mathcal{U}.
                    $$

            +code.
                def W' (A : U) (B : A → U) : U := W (x : A), B x

            h2 Introduction

            p
                +tex(false, false).
                    $\mathbf{Definition}$ ($\mathrm{W}$-Introduction). Elements of $\mathrm{W}_{(x : A)} B(x)$ are called
                    well-founded trees and created with single $\mathrm{sup}$ constructor:

                +tex(true, false).
                    $$
                        \mathrm{sup} : \mathrm{W}_{(x: A)} B(x).
                    $$

            +code.
                def sup' (A: U) (B: A → U) (x: A) (f: B x → W' A B)
                  : W' A B
                 := sup A B x f
            br.

            h2 Elimination

            p
                +tex(false, false).
                    $\mathbf{Definition}$ (Induction Principle $\mathrm{ind^W}$). The induction principle states that
                    for any types $A: \mathcal{U}$ and $B: A \rightarrow \mathcal{U}$ and type family $C$ over $\mathrm{W}(A,B)$
                    and the function $g : G$, where

                +tex(true, false).
                    $$
                       G = \prod_{x: A}\prod_{f: B(x) → \mathrm{W}(A,B)}\prod_{b: B(x)} C(f(b)) → C(\mathrm{sup}(x,f))
                    $$

                .
                    there is a dependent function:

                +tex(true, false).
                    $$
                       \mathrm{ind^W} : \prod_{C: \mathrm{W}(A,B) → \mathcal{U}}\prod_{g:G}\prod_{a: A}\prod_{f: B(a) → \mathrm{W}(A,B)}\prod_{b: B(a)}C(f(b)).
                    $$

            +code.
                def W-ind (A : U) (B : A → U)
                    (C : (W (x : A), B x) → U)
                    (g : Π (x : A) (f : B x → (W (x : A), B x)), (Π (b : B x), C (f b)) → C (sup A B x f))
                    (a : A) (f : B a → (W (x : A), B x)) (b : B a) : C (f b) := indᵂ A B C g (f b)

            h2 Computation

            p
                +tex(false, false).
                    $\mathbf{Theorem}$ ($\mathrm{ind^W}$ computes). The induction principle $\mathrm{ind^W}$ satisfies
                    the equation:
                +tex(true, false).
                    $$
                        \mathrm{ind^W_\beta} : g(a,f,λb.\mathrm{ind^W}(g,f(b))) = \mathrm{ind^W}(g,\mathrm{sup}(a,f)).
                    $$

            +code.
                def indᵂ-β (A : U) (B : A → U)
                    (C : (W (x : A), B x) → U) (g : Π (x : A)
                    (f : B x → (W (x : A), B x)), (Π (b : B x), C (f b)) → C (sup A B x f))
                    (a : A) (f : B a → (W (x : A), B x))
                  : PathP (<_> C (sup A B a f))
                          (indᵂ A B C g (sup A B a f))
                          (g a f (λ (b : B a), indᵂ A B C g (f b)))
                 := <_> g a f (λ (b : B a), indᵂ A B C g (f b))

include ../../../footer